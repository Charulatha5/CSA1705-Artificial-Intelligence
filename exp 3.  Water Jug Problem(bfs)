from collections import deque

def solution(a, b, target):
    m = {}
    is_solvable = False
    path = []

    q = deque([(0, 0)])

    while q:
        u = q.popleft()
        if u in m:
            continue
        if u[0] > a or u[1] > b or u[0] < 0 or u[1] < 0:
            continue
        path.append(u)
        m[u] = 1

        if u[0] == target or u[1] == target:
            is_solvable = True
            if u[0] == target and u[1] != 0:
                path.append((u[0], 0))
            elif u[1] == target and u[0] != 0:
                path.append((0, u[1]))
            for state in path:
                print("(", state[0], ",", state[1], ")")
            break

        q.append((u[0], b))
        q.append((a, u[1]))
        for ap in range(max(a, b) + 1):
            c, d = u[0] + ap, u[1] - ap
            if c == a or (d == 0 and d >= 0):
                q.append((c, d))
            c, d = u[0] - ap, u[1] + ap
            if (c == 0 and c >= 0) or d == b:
                q.append((c, d))
        q.append((a, 0))
        q.append((0, b))

    if not is_solvable:
        print("Solution not possible")

if __name__ == '__main__':
    jug1, jug2, target = 4, 3, 2
    print("Path from initial state to solution state ::")
    solution(jug1, jug2, target)
