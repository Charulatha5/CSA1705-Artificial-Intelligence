from collections import deque

class Graph:
    def __init__(self):
        self.graph = {}

    def add_edge(self, u, v):
        self.graph.setdefault(u, []).append(v)

    def bfs(self, start):
        visited, queue = set(), deque([start])
        result = []

        while queue:
            vertex = queue.popleft()
            if vertex not in visited:
                result.append(vertex)
                visited.add(vertex)
                queue.extend(self.graph.get(vertex, []))

        return result

# Example usage:
graph = Graph()
graph.add_edge(0, 1)
graph.add_edge(0, 2)
graph.add_edge(1, 2)
graph.add_edge(2, 0)
graph.add_edge(2, 3)
graph.add_edge(3, 3)

print("BFS traversal starting from vertex 2:", graph.bfs(2))
