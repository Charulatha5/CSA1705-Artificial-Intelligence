import itertools

def calculate_distance(points, order):
    distance = 0
    for i in range(len(order) - 1):
        distance += ((points[order[i]][0] - points[order[i+1]][0])**2 + (points[order[i]][1] - points[order[i+1]][1])**2) ** 0.5
    distance += ((points[order[-1]][0] - points[order[0]][0])**2 + (points[order[-1]][1] - points[order[0]][1])**2) ** 0.5
    return distance

def solve_tsp_brute_force(points):
    min_distance = float('inf')
    min_order = None
    for order in itertools.permutations(range(len(points))):
        distance = calculate_distance(points, order)
        if distance < min_distance:
            min_distance = distance
            min_order = order
    return min_order, min_distance

# Example usage:
points = [(0, 0), (1, 2), (2, 3), (3, 1)]
optimal_order, optimal_distance = solve_tsp_brute_force(points)
print("Optimal order:", optimal_order)
print("Optimal distance:", optimal_distance)
